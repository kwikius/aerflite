#if !defined QUAN_AERFLITE_BOARD
//Generated by OSDMaker for the Quantracker Air OSD
//https://github.com/kwikius/quantracker
//https://github.com/kwikius/osd_maker

#include <quan/uav/osd/api.hpp>
#include <quan/uav/osd/basic_bitmap.hpp>

namespace {

 struct home_image_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {16,12};
    }
 private:
    static constexpr uint8_t m_data[48] = {
      255, 191, 254, 255
      , 255, 107, 233, 255
      , 191, 150, 150, 254
      , 107, 105, 105, 233
      , 150, 86, 149, 150
      , 106, 85, 85, 169
      , 111, 170, 169, 249
      , 111, 130, 137, 249
      , 111, 130, 137, 249
      , 111, 130, 169, 249
      , 111, 130, 85, 249
      , 175, 170, 170, 250
      
      };
   } home_image;
  constexpr uint8_t home_image_type::m_data [ 48];

 struct satellite_image_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {15,19};
    }
 private:
    static constexpr uint8_t m_data[72] = {
      175, 234, 255, 255
      , 90, 233, 175, 175
      , 169, 229, 150, 91
      , 170, 166, 229, 150
      , 170, 150, 190, 165
      , 170, 165, 111, 165
      , 154, 166, 107, 165
      , 169, 230, 91, 165
      , 170, 233, 91, 165
      , 170, 249, 91, 165
      , 106, 254, 91, 165
      , 154, 255, 86, 85
      , 233, 191, 101, 149
      , 254, 107, 169, 234
      , 191, 86, 249, 255
      , 106, 85, 169, 191
      , 85, 85, 229, 175
      , 170, 170, 250, 255
      
      };
   } satellite_image;
  constexpr uint8_t satellite_image_type::m_data [ 72];

 struct altitude_symbol_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {12,9};
    }
 private:
    static constexpr uint8_t m_data[27] = {
      171, 255, 255, 154
      , 254, 255, 102, 234
      , 255, 86, 166, 170
      , 102, 166, 149, 170
      , 166, 166, 255, 86
      , 230, 255, 170, 230
      , 255, 255, 234
      };
   } altitude_symbol;
  constexpr uint8_t altitude_symbol_type::m_data [ 27];

 struct home_arrow_type : quan::uav::osd::basic_bitmap{
    uint8_t const * get_data()const
    {
       return m_data;
    }
    quan::uav::osd::size_type get_size()const
    {
       return {19,24};
    }
 private:
    static constexpr uint8_t m_data[114] = {
      255, 255, 234, 255
      , 255, 255, 191, 249
      , 255, 255, 255, 107
      , 250, 255, 255, 255
      , 86, 254, 255, 255
      , 175, 149, 254, 255
      , 255, 91, 149, 255
      , 255, 191, 86, 165
      , 255, 255, 111, 85
      , 229, 255, 255, 90
      , 85, 233, 255, 191
      , 85, 85, 249, 255
      , 107, 85, 85, 250
      , 255, 150, 86, 90
      , 254, 175, 165, 149
      , 150, 254, 91, 105
      , 165, 149, 191, 86
      , 90, 105, 165, 111
      , 149, 170, 90, 229
      , 90, 165, 170, 86
      , 169, 85, 105, 165
      , 85, 169, 90, 90
      , 105, 169, 254, 150
      , 86, 90, 254, 191
      , 165, 149, 150, 255
      , 111, 85, 85, 229
      , 255, 91, 85, 85
      , 249, 255, 170, 170
      , 170, 254
      };
   } home_arrow;
  constexpr uint8_t home_arrow_type::m_data [ 114];

 constexpr quan::uav::osd::bitmap_ptr bitmap_array[] =
   {
    &home_image
    ,&satellite_image
    ,&altitude_symbol
    ,&home_arrow
   };
} // namespace

quan::uav::osd::bitmap_ptr
quan::uav::osd::get_bitmap(uint32_t id)
{
constexpr uint32_t size = sizeof(bitmap_array)/sizeof(quan::uav::osd::bitmap_ptr);
  if ( id < size){
     return bitmap_array[id];
  }else{
     return nullptr;
  }
}

#endif
